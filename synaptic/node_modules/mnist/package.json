{
  "name": "mnist",
  "version": "1.0.5",
  "description": "mnist digits",
  "main": "src/mnist.js",
  "scripts": {
    "build": "browserify ./src/mnist.js > ./dist/mnist.js"
  },
  "devDependencies": {
    "browserify": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cazala/mnist.git"
  },
  "keywords": [
    "mnist",
    "digits"
  ],
  "author": {
    "name": "Juan Cazala",
    "email": "cazala@mail.sfsu.edu",
    "url": "http://juancazala.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/cazala/mnist/issues"
  },
  "homepage": "https://github.com/cazala/mnist",
  "readme": "MNIST Digits\n============\n\n![mnist digits](http://i.ytimg.com/vi/0QI3xgXuB-Q/hqdefault.jpg \"MNIST Digits\")\n\nThe goal of this library is to provide an easy-to-use way for training and testing [MNIST digits](https://en.wikipedia.org/wiki/MNIST_database) for neural networks (either in the browser or node.js). It includes [10000](https://www.youtube.com/watch?v=SiMHTK15Pik) different samples of mnist digits. I built this in order to work out of the box with [Synaptic](https://github.com/cazala/synaptic).\n\nYou are free to create any number (from 1 to 60 000) of different examples c via [MNIST Digits data loader](https://github.com/ApelSYN/mnist_dl)\n\n### Installation\n\nfor node.js: `npm install mnist --save`\n\nfor the browser: `bower install mnist --save`\n\n### Usage\n\nThe most important method is `mnist.set(trainingAmount, testAmount)` which takes the amount of samples for the training and test sets, and returns an object with the two sets of samples (one for training and the other one for testing). Both sets are shuffled, and there are no samples repeated in both sets.\n\nFor example:\n\n```\nvar mnist = require('mnist'); // this line is not needed in the browser\n\nvar set = mnist.set(8000, 2000);\n\nvar trainingSet = set.training;\nvar testSet = set.test;\n\n```\n\nThat would create a random training set of 8000 mnist digits, and a test set with other random 2000 mnist digits, and there are not going to be any sample in the training set repeated in the test set.\n\nEvery set consist of an array of elements, which each of them will looks like this:\n\n```\n{\n    input: [0,0,0,1,1, ... ,0,0], // a 784-length array of floats representing each pixel of the 28 x 28 image, normalized between 0 and 1\n    output: [0,0,0,0,0,0,1,0,0,0] // a 10-length binary array that tells which digits (from 0 to 9) is in that image\n}\n```\n\n\n### Helpers\n\nEvery digit has a set of helper functions which are listed below. To access these functions you have to target the desired digit like this: `mnist[digit]`.\n\nSo, for example, to get a single '5' digit, you would call `mnist[5].get()`.\n\nThese are all the helper function:\n\n#####.get([index])\n\nReturns a single sample of that digit, given its index. If no index is provided, a random sample is returned.\n\n```\nmnist[0].get(100) // [0,0,0,1,1...,0,0]\n```\n\n#####.length\n\nReturns the number of samples available for that digit\n\n```\nmnist[6].length // 1009\n```\n\n#####.range(start, end)\n\nReturns an array of samples, corresponding to the range specified between the `start` and `end` arguments\n\n```\nmnist[9].range(10, 17) // [ array with 7 samples of the digit 9 ]\n```\n\n#####.set(start, end)\n\nReturns an dataset of samples, corresponding to the range specified between the `start` and `end` arguments, every element of the array has an `input` and `output` properties, being `input` the normalized data for all the pixels of each image, and output a 10-length binary array representing which digit is in that image.\n\n```\nmnist[4].set(200, 250) // [ dataset with 50 samples of the digit 4 ready for training/testing a neural network ]\n```\n\n#####.raw\n\nThis property provides access to all the raw data for all the samples of that digit\n\n```\nmnist[3].raw // all the raw data for digit 3\n```\n\n### Drawing a digit (only in the browser)\n\nThis lets you draw a given digit in a canvas context: `mnist.draw(digit, context [,offsetX, offsetY])`\n\n```\nvar digit = mnist[1].get();\nvar context = document.getElementById('myCanvas').getContext('2d');\n\nmnist.draw(digit, context); // draws a '1' mnist digit in the canvas\n```\n\nThe digit provided has to be a 784-length array of normalized values (0-1). All of the following approaches will work:\n\n```\nvar digit = mnist[0].get(); // single digit\nvar digit = mnist[1].range(0, 100)[50]; // extracting the digit from a range\nvar digit = mnist[4].set(0, 100)[20].input; // extracting the digit from a dataset\nvar digit = mnist.set(8000, 2000).training[0].input; // extracting the digit from a training set\nvar digit = mnist.set(8000, 2000).test[15].input; // extracting the digit from a test set\n```\n\n### Contributing\n\nIf you want to contribute feel free to submit PR's, just make sure to run `npm run build` to build the `/dist` files before submitting.\n",
  "readmeFilename": "README.md",
  "_id": "mnist@1.0.5",
  "dist": {
    "shasum": "1e0a73931b70fb953fb51151cda14e859a818e7a"
  },
  "_from": "mnist@",
  "_resolved": "https://registry.npmjs.org/mnist/-/mnist-1.0.5.tgz"
}
